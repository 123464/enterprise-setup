#!/bin/bash

set -e
set -x
set -o pipefail

IS_MASTER="${is_master}"
MONGO_VERSION="3.2.13"

main() {
  install_docker
  apply_mongo_optimisations
  install_mongo_packages
  configure_mongo_storage
  configure_mongod
  create_mongo_helper
  pull_mongod
  start_mongod
  wait_for_mongod
  add_mongo_root_user
  test_mongo_root_user
  add_mongo_services_user
  test_mongo_services_user
  initiate_rs_config
  restart_mongod
  wait_for_mongod
  if [[ "$IS_MASTER" == "true" ]]; then
    create_replicasets
  fi
}


install_docker() {
  echo "-------------------------------------------"
  echo "     Performing System Updates"
  echo "-------------------------------------------"
  apt-get update && apt-get -y upgrade

  echo "--------------------------------------------"
  echo "       Setting Private IP"
  echo "--------------------------------------------"
  export PRIVATE_IP="$(/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')"

  echo "--------------------------------------------"
  echo "          Download Replicated"
  echo "--------------------------------------------"
  curl -sSk -o /tmp/get_replicated.sh "https://get.replicated.com/docker?replicated_tag=$REPLICATED_VERSION&replicated_ui_tag=$REPLICATED_VERSION&replicated_operator_tag=$REPLICATED_VERSION"

  echo "--------------------------------------"
  echo "        Installing Docker"
  echo "--------------------------------------"
  apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual
  apt-get install -y apt-transport-https ca-certificates curl
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  apt-get update
  apt-get -y install docker-ce=17.03.2~ce-0~ubuntu-trusty cgmanager
}


apply_mongo_optimisations() {
  echo 'never' >/sys/kernel/mm/transparent_hugepage/enabled
  echo 'never' >/sys/kernel/mm/transparent_hugepage/defrag
}


install_mongo_packages() {
  local packages=(
    curl \
    unzip \
    zip \
  )

  policyrcd_forbid_all
  apt-get -y install "$${packages[@]}"
  policyrcd_allow_all
}


configure_mongo_storage() {
  if [[ -z "${mongo_device_path}" ]]; then
    echo 'mongo_device_path is null' >&2
    return 1
  fi

  if [[ -z "${mongo_mount_path}" ]]; then
    echo 'mongo_mount_path is null' >&2
    return 1
  fi

  # By this point, cloudinit should have formatted the block device with a
  # filesystem (if necessary) and mounted the filesystem where we expect.
  local -r actual_mount_path="$$(lsblk --raw --noheadings --nodeps --output MOUNTPOINT "${mongo_device_path}")"
  if [[ "$${actual_mount_path}" != "${mongo_mount_path}" ]]; then
    echo 'mongo_device_path is not mounted' >&2
    return 1
  fi

  mkdir "${mongo_mount_path}/data"
}


create_mongo_helper() {
  cat << EOF >> /home/ubuntu/.bash_profile
mongo() {
  sudo docker run -it --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
      --authenticationDatabase admin \
      --authenticationMechanism MONGODB-X509 \
      --ssl \
      --sslCAFile /etc/mongodb/ca.pem \
      --sslPEMKeyFile /etc/mongodb/root.pem \
      admin
}
EOF
}


configure_mongod() {
  sudo useradd -u 999 -m mongodb
  chown mongodb "${mongo_mount_path}/data"
  mkdir /etc/mongodb

  cat - >/etc/mongodb/ca.pem <<'EOF'
${ca_cert_pem}
EOF
  chmod 0444 /etc/mongodb/ca.pem

  cat - >/etc/mongodb/server.pem <<'EOF'
${server_key_pem}
${server_cert_pem}
EOF
  chown mongodb /etc/mongodb/server.pem
  chmod 0440 /etc/mongodb/server.pem

  # This certificate is not strictly required on the servers.  Convenience only.
  cat - >/etc/mongodb/root.pem <<'EOF'
${root_key_pem}
${root_cert_pem}
EOF
  chown mongodb /etc/mongodb/root.pem
  chmod 0440 /etc/mongodb/root.pem

  mkdir /etc/mongod
  cat - >/etc/mongod/mongod.conf <<'EOF'
storage:
  dbPath: ${mongo_mount_path}/data

# Manually uncomment the following lines and 'service mongod restart' when you
# are ready to deploy the replica set.  We disable this by default so that
# cloudinit may bootstrap the root user.

#replication:
#  replSetName: ${mongo_replica_set_name}

security:
  clusterAuthMode: x509

net:
  port: 27017
  ssl:
    mode: requireSSL
    CAFile: /etc/mongodb/ca.pem
    PEMKeyFile: /etc/mongodb/server.pem
    disabledProtocols: TLS1_0,TLS1_1
EOF

  chown -R mongodb /etc/mongod
  chmod 0440 /etc/mongod/mongod.conf
}


pull_mongod() {
  docker pull mongo:$${MONGO_VERSION}
}


start_mongod() {
  docker run -d --name mongodb --restart always \
    -u mongodb \
    --network host \
    -v /mongo:/mongo \
    -v /etc/mongodb:/etc/mongodb \
    -v /etc/mongod:/etc/mongod:ro \
    mongo:$${MONGO_VERSION} \
      -f /etc/mongod/mongod.conf
}


restart_mongod() {
  docker restart mongodb
}


wait_for_mongod() {
  local -r timeout=60
  local -r started="$${SECONDS}"
  local now
  while ! nc -n -w 3 127.0.0.1 27017 </dev/null ; do
    now="$${SECONDS}"
    if [[ $(( $${now} - $${started} )) -gt $${timeout} ]]; then
      echo "mongod failed to start within $${timeout} seconds" >&2
      exit 1
    fi
    echo 'waiting for mongod...' >&2
    sleep 5
  done
}


add_mongo_services_user() {
  docker run -i --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
    admin <<EOF
db.getSiblingDB("\$external").runCommand(
  {
    createUser: user: 'circle', pwd: $${mongo_circle_user_password.password},
    roles: [  { role: 'readWrite', db: 'circle_ghe' },
              { role: 'readWrite', db: 'build_state_dev_ghe' },
              { role: 'readWrite', db: 'containers_dev_ghe' } ]
  }
)
EOF
}

test_mongo_services_user() {
  docker run -i --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
      --authenticationDatabase admin \
      --authenticationMechanism MONGODB-CR \
      admin <<EOF
db.getSiblingDB("\$external").auth(
  {
    mechanism: "MONGODB-CR",
    user: "circle",
    password: $${mongo_circle_user_password.password}
  }
)

db.stats()
EOF
}


add_mongo_root_user() {
  local -r subject="$(rfc2253_subject_from_x509_cert /etc/mongodb/root.pem)"
  if [[ -z "$${subject}" ]]; then
    echo 'failed to extract subject DN from root user x509 certificate' >&2
    exit 1
  fi

  docker run -i --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
    --ssl \
    --sslCAFile /etc/mongodb/ca.pem \
    --sslPEMKeyFile /etc/mongodb/root.pem \
    admin <<EOF
db.getSiblingDB("\$external").runCommand(
  {
    createUser: "$${subject}",
    roles: [
      { role: 'root', db: 'admin' }
    ]
  }
)
EOF
}


test_mongo_root_user() {
  local -r subject="$(rfc2253_subject_from_x509_cert /etc/mongodb/root.pem)"
  if [[ -z "$${subject}" ]]; then
    echo 'failed to extract subject DN from root user x509 certificate' >&2
    exit 1
  fi

  docker run -i --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
      --authenticationDatabase admin \
      --authenticationMechanism MONGODB-X509 \
      --ssl \
      --sslCAFile /etc/mongodb/ca.pem \
      --sslPEMKeyFile /etc/mongodb/root.pem \
      admin <<EOF
db.getSiblingDB("\$external").auth(
  {
    mechanism: "MONGODB-X509",
    user: "$${subject}"
  }
)

db.stats()
EOF
}


create_replicasets() {
  local -r subject="$(rfc2253_subject_from_x509_cert /etc/mongodb/root.pem)"
  if [[ -z "$${subject}" ]]; then
    echo 'failed to extract subject DN from root user x509 certificate' >&2
    exit 1
  fi

  docker run -i --rm \
    --network host \
    -u mongodb \
    -v /home/mongodb:/home/mongodb \
    -v /etc/mongodb:/etc/mongodb \
    mongo:$${MONGO_VERSION} \
    mongo \
      --ssl \
      --sslCAFile /etc/mongodb/ca.pem \
      --sslPEMKeyFile /etc/mongodb/root.pem \
      admin <<EOF
db.getSiblingDB("\$external").auth(
  {
    mechanism: "MONGODB-X509",
    user: "$${subject}"
  }
)

rs.initiate(
  {
    _id : "${mongo_replica_set_name}",
    members: [
      { _id : 0, host : "${mongo_replica_set_name}-01.infra.circleci.com:27017" }
    ]
  }
)

function checkRsStatus() {
  status = rs.status()
  if (status.myState && status.ok && status.myState === 1 && status.ok === 1) {
    return true
  }
  return false
}

while (checkRsStatus() === false) {
  print('waiting for primary replicaset to be ready')
  sleep(10000)
}

for (var i=1; i < ${num_instances}; i++) {
  rs.add("${mongo_replica_set_name}-0"+(i+1)+".${mongo_domain}:27017")
}
EOF
}


initiate_rs_config() {
  sed -i 's/#replication/replication/' /etc/mongod/mongod.conf
  sed -i 's/#  replSetName/   replSetName/' /etc/mongod/mongod.conf
}


rfc2253_subject_from_x509_cert() {
  local path="$1"
  openssl x509 -in "$${path}" -subject -nameopt RFC2253 \
    | sed -nr '/^-+BEGIN CERTIFICATE-+$/,/^-+END CERTIFICATE-+$/!p' \
    | head -n 1 \
    | sed 's/^subject= //' \
    | sed 's,\\,\\\\,g' \
    | sed 's,",\\",g'
}


policyrcd_forbid_all() {
  local -r p='/usr/sbin/policy-rc.d'
  echo 'exit 101' >"$${p}"
  chmod a+x "$${p}"
}


policyrcd_allow_all() {
  local -r p='/usr/sbin/policy-rc.d'
  rm -f "$${p}"
}


main "$$@"
